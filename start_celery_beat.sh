#!/usr/bin/env bash
# Script espec√≠fico para iniciar o BEAT Celery
set -e

echo "‚è∞ Iniciando Celery Beat..."

# Aguardar servi√ßos essenciais (sem migra√ß√£o - beat n√£o precisa aplicar migrations principais)
./wait_for_db.sh

# Verificar configura√ß√£o do Celery
echo "üîß Verificando configura√ß√£o do Celery Beat..."
python -c "
from sms_sender.celery import app
print(f'‚úÖ App: {app.main}')
print(f'‚úÖ Broker: {app.conf.broker_url}')
print(f'‚úÖ Backend: {app.conf.result_backend}')
print('‚úÖ Configura√ß√£o do Celery Beat v√°lida!')
"

# Garantir que as migra√ß√µes est√£o aplicadas
echo "üîÑ Verificando migra√ß√µes do django-celery-beat..."
python manage.py migrate django_celery_beat --noinput 2>/dev/null || echo "‚ö†Ô∏è Migra√ß√µes do beat podem n√£o estar dispon√≠veis"

# Remover arquivos de lock antigos se existirem
echo "üßπ Limpando arquivos antigos..."
rm -f celerybeat.pid celerybeat-schedule celerybeat-schedule.db

# Fun√ß√£o para cleanup em caso de interrup√ß√£o
cleanup() {
    echo 'üîÑ Recebido sinal de parada, finalizando beat...'
    kill -TERM "\$child" 2>/dev/null || true
    wait "\$child" 2>/dev/null || true
    rm -f celerybeat.pid celerybeat-schedule celerybeat-schedule.db
    exit 0
}

# Capturar sinais para cleanup graceful
trap cleanup SIGTERM SIGINT

echo "‚è∞ Iniciando Celery Beat..."

# Configura√ß√µes espec√≠ficas para o Render
export C_FORCE_ROOT=1

# Iniciar beat com configura√ß√µes otimizadas
exec celery -A sms_sender beat \
    --loglevel=info \
    --scheduler django_celery_beat.schedulers:DatabaseScheduler \
    --pidfile=celerybeat.pid
