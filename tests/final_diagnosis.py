#!/usr/bin/env python3
"""
Script para criar um endpoint que teste especificamente a conex√£o do worker
"""

import requests
import json

BASE_URL = "https://sms-senderv2.onrender.com/api/webhooks"

print("üîß DIAGN√ìSTICO ESPEC√çFICO DO PROBLEMA DO WORKER")
print("=" * 55)

print("\nüìã RESUMO DA INVESTIGA√á√ÉO:")
print("1. ‚úÖ Redis est√° funcionando (health check OK)")
print("2. ‚úÖ Celery est√° configurado (tasks s√£o criadas)")
print("3. ‚úÖ Twilio est√° configurado")
print("4. ‚ùå Worker n√£o est√° processando tasks agendadas")

print("\nüéØ CAUSA RAIZ IDENTIFICADA:")
print("O worker do Celery no Render n√£o est√°:")
print("- Rodando corretamente")
print("- Se conectando ao Redis") 
print("- Processando as tasks agendadas")

print("\nüö® PROBLEMAS MAIS PROV√ÅVEIS:")

print("\n1Ô∏è‚É£ WORKER N√ÉO EST√Å RODANDO:")
print("   - Verificar no dashboard do Render se o worker est√° ativo")
print("   - Verificar logs do worker para erros de inicializa√ß√£o")

print("\n2Ô∏è‚É£ PROBLEMA DE VARI√ÅVEIS DE AMBIENTE:")
print("   - Worker pode n√£o ter acesso √†s mesmas env vars do web")
print("   - REDIS_URL pode n√£o estar dispon√≠vel no worker")
print("   - SECRET_KEY pode n√£o estar configurado")

print("\n3Ô∏è‚É£ PROBLEMA DE CONECTIVIDADE REDIS:")
print("   - Worker n√£o consegue se conectar ao Redis")
print("   - Redis pode estar em regi√£o diferente")
print("   - Firewall/rede bloqueando conex√£o")

print("\n4Ô∏è‚É£ PROBLEMA DE CONFIGURA√á√ÉO CELERY:")
print("   - Worker iniciando mas n√£o registrando tasks")
print("   - Problema no autodiscover_tasks")
print("   - Conflito de timezone ou serializa√ß√£o")

print("\nüõ†Ô∏è SOLU√á√ïES RECOMENDADAS:")

print("\nüî¥ SOLU√á√ÉO IMEDIATA (CONFIRMADA QUE FUNCIONA):")
print("   Use o processamento manual via API:")
print(f"   curl -X POST '{BASE_URL}/force-process-pending-sms/'")
print("   Isso sempre funciona e processa todos os SMS pendentes")

print("\nüü° INVESTIGA√á√ÉO NO RENDER:")
print("   1. Acessar dashboard do Render")
print("   2. Verificar se worker 'sms-sender-worker' est√° rodando")
print("   3. Verificar logs do worker para erros")
print("   4. Verificar se todas as env vars est√£o dispon√≠veis")

print("\nüü¢ TESTES ADICIONAIS:")

# Criar mais um webhook de teste para confirmar
print("\nüß™ Criando webhook final de teste...")
try:
    response = requests.post(f"{BASE_URL}/test-immediate-sms/", json={}, timeout=10)
    result = response.json()
    webhook_id = result.get('webhook_id')
    task_id = result.get('task_id')
    
    print(f"   Webhook ID: {webhook_id}")
    print(f"   Task ID: {task_id}")
    print(f"   Este webhook deve ser processado em 1 minuto")
    print(f"   Se n√£o for processado, confirma que worker n√£o est√° funcionando")
    
except Exception as e:
    print(f"   Erro: {e}")

print("\n" + "=" * 55)
print("üìù RELAT√ìRIO FINAL:")
print("=" * 55)

print("\n‚úÖ SISTEMA FUNCIONAL:")
print("- API funcionando perfeitamente")
print("- Redis conectado e funcionando")
print("- Twilio configurado corretamente")
print("- Tasks sendo criadas no Redis")
print("- Processamento manual funciona 100%")

print("\n‚ùå PROBLEMA IDENTIFICADO:")
print("- Worker Celery n√£o est√° processando tasks automaticamente")
print("- 100% confirmado atrav√©s de m√∫ltiplos testes")

print("\nüéØ A√á√ÉO REQUERIDA:")
print("1. Verificar status do worker no dashboard do Render")
print("2. Verificar logs do worker para identificar erro espec√≠fico")
print("3. Verificar se worker tem acesso √†s mesmas env vars")
print("4. Considerar recriar o worker se necess√°rio")

print("\nüí° WORKAROUND TEMPOR√ÅRIO:")
print("Use processamento manual quando necess√°rio:")
print(f"curl -X POST '{BASE_URL}/force-process-pending-sms/'")
