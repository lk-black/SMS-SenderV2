#!/usr/bin/env bash
# Beat startup script with comprehensive health checks
set -e

echo "üïê Iniciando Celery Beat com verifica√ß√µes de sa√∫de..."

# Aguardar servi√ßos essenciais
./wait_for_db.sh echo "Servi√ßos prontos para beat"

# Verificar configura√ß√£o do Celery
echo "üîß Verificando configura√ß√£o do Celery Beat..."
python -c "
from sms_sender.celery import app
print(f'‚úÖ App: {app.main}')
print(f'‚úÖ Broker: {app.conf.broker_url}')
print(f'‚úÖ Backend: {app.conf.result_backend}')
print('‚úÖ Configura√ß√£o do Celery Beat v√°lida!')
"

# Garantir que as migra√ß√µes est√£o aplicadas
echo "üîÑ Verificando migra√ß√µes do django-celery-beat..."
python manage.py migrate django_celery_beat --noinput || echo "‚ö†Ô∏è Migra√ß√µes do beat podem n√£o estar dispon√≠veis"

# Remover arquivo de lock antigo se existir
if [ -f "celerybeat.pid" ]; then
    echo "üßπ Removendo arquivo PID antigo..."
    rm -f celerybeat.pid
fi

if [ -f "celerybeat-schedule" ]; then
    echo "üßπ Removendo schedule antigo..."
    rm -f celerybeat-schedule
fi

# Fun√ß√£o para cleanup em caso de interrup√ß√£o
cleanup() {
    echo 'üîÑ Recebido sinal de parada, finalizando beat...'
    kill -TERM "\$child" 2>/dev/null
    wait "\$child"
    rm -f celerybeat.pid celerybeat-schedule
    exit 0
}

# Capturar sinais para cleanup graceful
trap cleanup SIGTERM SIGINT

echo "‚è∞ Iniciando Celery Beat..."

# Iniciar beat com configura√ß√µes otimizadas
celery -A sms_sender beat \
    --loglevel=info \
    --scheduler django_celery_beat.schedulers:DatabaseScheduler \
    --pidfile=celerybeat.pid &

child=\$!
wait "\$child"
        time.sleep(2)
"

# Wait for database to be available
echo "Checking database connection..."
python manage.py check --database default

echo "Starting Celery beat..."
celery -A sms_sender beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
