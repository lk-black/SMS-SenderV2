#!/bin/bash

# SMS Sender - Script de Deploy para Render
# Este script prepara e valida a aplica√ß√£o para deploy

set -e

echo "üöÄ SMS Sender - Prepara√ß√£o para Deploy na Render"
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Verificar se estamos no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    echo -e "${RED}‚ùå Execute este script no diret√≥rio raiz do projeto${NC}"
    exit 1
fi

echo -e "\n${BLUE}üìã Validando arquivos necess√°rios...${NC}"

# Verificar arquivos obrigat√≥rios
required_files=("build.sh" "Procfile" "runtime.txt" "requirements.txt" "render.yaml")
for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úÖ $file${NC}"
    else
        echo -e "${RED}‚ùå $file n√£o encontrado${NC}"
        exit 1
    fi
done

echo -e "\n${BLUE}üîç Verificando configura√ß√µes...${NC}"

# Verificar se build.sh √© execut√°vel
if [ -x "build.sh" ]; then
    echo -e "${GREEN}‚úÖ build.sh √© execut√°vel${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Tornando build.sh execut√°vel...${NC}"
    chmod +x build.sh
fi

# Testar build localmente
echo -e "\n${BLUE}üõ†Ô∏è  Testando build local...${NC}"
pip install -r requirements.txt > /dev/null 2>&1
python manage.py check --deploy > /dev/null 2>&1
echo -e "${GREEN}‚úÖ Build teste passou${NC}"

# Verificar migra√ß√µes
echo -e "\n${BLUE}üìä Verificando migra√ß√µes...${NC}"
python manage.py makemigrations --dry-run --check > /dev/null 2>&1
echo -e "${GREEN}‚úÖ Migra√ß√µes est√£o atualizadas${NC}"

# Verificar static files
echo -e "\n${BLUE}üìÅ Testando coleta de arquivos est√°ticos...${NC}"
python manage.py collectstatic --noinput --dry-run > /dev/null 2>&1
echo -e "${GREEN}‚úÖ Arquivos est√°ticos OK${NC}"

# Verificar imports e sintaxe
echo -e "\n${BLUE}üêç Verificando sintaxe Python...${NC}"
python -m py_compile sms_sender/settings.py
python -m py_compile sms_sender/wsgi.py
echo -e "${GREEN}‚úÖ Sintaxe OK${NC}"

echo -e "\n${GREEN}üéâ Aplica√ß√£o pronta para deploy!${NC}"
echo -e "\n${BLUE}üìù Pr√≥ximos passos:${NC}"
echo "1. Commit e push para seu reposit√≥rio GitHub"
echo "2. Acesse https://dashboard.render.com"
echo "3. Crie um novo Blueprint e conecte seu reposit√≥rio"
echo "4. Configure as vari√°veis de ambiente:"
echo "   - TWILIO_ACCOUNT_SID"
echo "   - TWILIO_AUTH_TOKEN" 
echo "   - TWILIO_PHONE_NUMBER"
echo "   - SECRET_KEY (gere uma nova)"
echo "   - ALLOWED_HOSTS (seu-app.onrender.com)"
echo -e "\n${YELLOW}üìñ Consulte DEPLOY_GUIDE.md para instru√ß√µes detalhadas${NC}"

# Gerar SECRET_KEY se solicitado
read -p "Deseja gerar uma nova SECRET_KEY? (y/n): " generate_key
if [ "$generate_key" = "y" ] || [ "$generate_key" = "Y" ]; then
    echo -e "\n${BLUE}üîë Nova SECRET_KEY gerada:${NC}"
    python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
fi

echo -e "\n${GREEN}‚ú® Deploy preparado com sucesso!${NC}"
